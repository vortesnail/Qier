import{_ as i,c as a,a2 as e,o as t}from"./chunks/framework.etYTtafL.js";const c=JSON.parse('{"title":"Getting Started","description":"","frontmatter":{},"headers":[],"relativePath":"guide/getting-started.md","filePath":"en/guide/getting-started.md","lastUpdated":1727107399000}'),n={name:"guide/getting-started.md"};function l(p,s,h,d,r,o){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started {#getting-started}&quot;">​</a></h1><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation {#installation}&quot;">​</a></h2><p>After reading the <a href="./installation">installation section</a>, you should know various installation methods. Now, let&#39;s assume we are using ES module import.</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-bJGxR" id="tab-pG1U43P" checked><label for="tab-pG1U43P">npm</label><input type="radio" name="group-bJGxR" id="tab-OJC2H9A"><label for="tab-OJC2H9A">pnpm</label><input type="radio" name="group-bJGxR" id="tab-qUzKryF"><label for="tab-qUzKryF">yarn</label></div><div class="blocks"><div class="language-sh vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> qier-player</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> qier-player</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> qier-player</span></span></code></pre></div></div></div><h2 id="started" tabindex="-1">Getting Started <a class="header-anchor" href="#started" aria-label="Permalink to &quot;Getting Started {#started}&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Player </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;qier-player&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> player</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Player</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  src: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://vortesnail.github.io/qier-player-demo/static/media/video480p.d116ba09.mp4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">player.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.body)</span></span></code></pre></div><p>First, we import <code>Player</code>, create an instance, then pass in the video URL, and call the <code>mount</code> method to attach it to the <code>body</code> element.</p><p>The <code>mount</code> method attaches the actual DOM elements generated by the player to the specified DOM element. It accepts a parameter, which can be a string (selector) or an actual DOM element. When it is a string, the internal implementation finds the actual DOM element using <code>document.querySelector</code>.</p><h2 id="get-doms" tabindex="-1">Accessing Related DOM Elements <a class="header-anchor" href="#get-doms" aria-label="Permalink to &quot;Accessing Related DOM Elements {#get-doms}&quot;">​</a></h2><p>After calling the <code>mount</code> method, you can access internal members through the instance. The following are commonly accessed:</p><ul><li><strong>Mounted element</strong>: Accessible via <code>container</code>.</li><li><strong>Player root element</strong>: Accessible via <code>el</code>.</li><li><strong>video</strong>: Accessible via <code>video</code>.</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Player </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;qier-player&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> player</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Player</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  src: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://vortesnail.github.io/qier-player-demo/static/media/video480p.d116ba09.mp4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">player.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.body)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(player.container) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// document.body</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(player.el)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(player.video)</span></span></code></pre></div><h2 id="instance-properties-functions" tabindex="-1">Instance Properties and Methods <a class="header-anchor" href="#instance-properties-functions" aria-label="Permalink to &quot;Instance Properties and Methods {#instance-properties-functions}&quot;">​</a></h2><p>After creating the instance <code>player</code>, there are many member properties that we can read.</p><p>For example, the following code achieves autoplay and then pauses after <code>10</code> seconds.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">player.muted </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Mute</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">player.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">play</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Play</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  player.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pause</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Pause</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>If we print the <code>player</code> instance in the console, you will find many member properties when expanded. For more details, please click on <a href="./../api/properties">Properties</a> and <a href="./../api/functions">Methods</a>.</p><h2 id="instance-bus" tabindex="-1">Event Listening <a class="header-anchor" href="#instance-bus" aria-label="Permalink to &quot;Event Listening {#instance-bus}&quot;">​</a></h2><p>The <code>player</code> has 5 methods related to events.</p><table tabindex="0"><thead><tr><th>Method</th><th>Description</th></tr></thead><tbody><tr><td>emit(evt: string, ...args: any[])</td><td>Dispatch event</td></tr><tr><td>on(evt: string, fn?: Function)</td><td>Listen for event</td></tr><tr><td>once(evt: string, fn?: Function)</td><td>Listen for event, callback function is called only once</td></tr><tr><td>off(evt: string, fn?: Function)</td><td>Unregister event listener</td></tr><tr><td>removeAllListeners(evt?: string)</td><td>Unregister all event listeners</td></tr></tbody></table><p>You can use these methods to listen to built-in events.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Player, { EVENT } form </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;qier-player&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">const player = new Player()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">player.on(EVENT.PLAY, () =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.log(&#39;Playback started&#39;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p><code>EVENT.PLAY</code> is essentially a string, using camel case naming as <code>Play</code>.</p><p>You can also define custom event listeners.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Player, { EVENT } form </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;qier-player&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">const player = new Player()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Dispatch event</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">player.emit(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;CustomEvent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Listen for event and execute callback function</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">player.on(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;CustomEvent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.log(&#39;Custom event triggered&#39;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>For more built-in events, please see <a href="/qier-player/zh/api/events">Events</a>.</p><h2 id="instance-destroy" tabindex="-1">Destruction <a class="header-anchor" href="#instance-destroy" aria-label="Permalink to &quot;Destruction {#instance-destroy}&quot;">​</a></h2><p>The <code>player</code> and all components implement the <code>Dispose</code> interface, meaning they have a <code>dispose</code> method. Calling this method will destroy the object and its DOM elements.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">player.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.body)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Destroy player and its DOM elements after 5 seconds</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> player.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dispose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="muti-level" tabindex="-1">Multilevel <a class="header-anchor" href="#muti-level" aria-label="Permalink to &quot;Multilevel {#muti-level}&quot;">​</a></h2><p>This player consists of 6 different functional levels, each with its own <code>z-index</code>.</p><table tabindex="0"><thead><tr><th>Level</th><th>z-index</th><th>Description</th></tr></thead><tbody><tr><td>Video Element</td><td>-</td><td>Video element has no z-index</td></tr><tr><td>Poster Image</td><td>10</td><td>Video poster</td></tr><tr><td>Loading Indicator</td><td>20</td><td>Loading indicator element displayed when video is loading</td></tr><tr><td>Control Bar</td><td>30</td><td>Bottom control bar for the video</td></tr><tr><td>Context Menu</td><td>40</td><td>Menu that pops up for the video element on right-click</td></tr><tr><td>Toast Notification</td><td>50</td><td>Notification box</td></tr></tbody></table><p>Except for the <code>video</code> element, all other functional components use <strong>absolute positioning</strong>. After providing plugin functionality in the future, developers can decide on appropriate <code>z-index</code> values to avoid unnecessary blocking.</p><h2 id="questions" tabindex="-1">Questions &amp; New Features <a class="header-anchor" href="#questions" aria-label="Permalink to &quot;Questions &amp; New Features {#questions}&quot;">​</a></h2><p>If you encounter bugs, want new features, or have usage-related questions, feel free to open an <a href="https://github.com/vortesnail/qier-player/issues/new/choose" target="_blank" rel="noreferrer">issue</a>.</p>`,35)]))}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
