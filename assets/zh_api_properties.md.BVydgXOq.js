import{_ as i,c as a,a2 as s,o as t}from"./chunks/framework.etYTtafL.js";const k=JSON.parse('{"title":"属性","description":"","frontmatter":{},"headers":[],"relativePath":"zh/api/properties.md","filePath":"zh/api/properties.md","lastUpdated":1727107399000}'),l={name:"zh/api/properties.md"};function n(o,e,d,h,r,p){return t(),a("div",null,e[0]||(e[0]=[s('<h1 id="properties" tabindex="-1">属性 <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;属性 {#properties}&quot;">​</a></h1><p>创建的实例有许多属性可供读写，你可以在控制台打印后查看：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> player</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Player</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(player)</span></span></code></pre></div><h2 id="container-htmlelement" tabindex="-1"><code>container: HTMLElement</code> <a class="header-anchor" href="#container-htmlelement" aria-label="Permalink to &quot;`container: HTMLElement`&quot;">​</a></h2><p>播放器容器标签元素（<code>container</code> 参数或 <code>mount()</code> 传入的参数）。</p><h2 id="el-htmldivelement" tabindex="-1"><code>el: HTMLDivElement</code> <a class="header-anchor" href="#el-htmldivelement" aria-label="Permalink to &quot;`el: HTMLDivElement`&quot;">​</a></h2><p>播放器本身最外层标签元素，即类名为 <code>qier-player</code> 的元素。</p><h2 id="video-htmlvideoelement" tabindex="-1"><code>video: HTMLVideoElement</code> <a class="header-anchor" href="#video-htmlvideoelement" aria-label="Permalink to &quot;`video: HTMLVideoElement`&quot;">​</a></h2><p>播放器 <code>video</code> 标签元素。</p><h2 id="options-iplayeroptions" tabindex="-1"><code>options: IPlayerOptions</code> <a class="header-anchor" href="#options-iplayeroptions" aria-label="Permalink to &quot;`options: IPlayerOptions`&quot;">​</a></h2><p>传入的播放器所有配置项和默认的配置项，合并成一个对象。</p><h2 id="rect-rect" tabindex="-1"><code>rect: Rect</code> <a class="header-anchor" href="#rect-rect" aria-label="Permalink to &quot;`rect: Rect`&quot;">​</a></h2><p>播放器尺寸相关。</p><ul><li><code>rect.width</code> 播放器宽度，只可读。</li><li><code>rect.height</code> 播放器高度，只可读。</li><li><code>rect.x</code> 播放器横坐标，只可读。</li><li><code>rect.y</code> 播放器纵坐标，只可读。</li><li><code>rect.update</code> 更新播放器尺寸。</li></ul><p>尽量不要调用 <code>player.rect.update()</code> 方法，而是触发 <code>UpdateSize</code> 事件， <code>player.emit(&#39;UpdateSize&#39;)</code>。</p><h2 id="poster-poster" tabindex="-1"><code>poster: Poster</code> <a class="header-anchor" href="#poster-poster" aria-label="Permalink to &quot;`poster: Poster`&quot;">​</a></h2><p>播放器海报。</p><ul><li><code>poster.el</code> 海报最外层标签元素。</li><li><code>poster.isActive</code> 是否显示播放器海报，只可读。</li><li><code>poster.show</code> 显示播放器海报方法。</li><li><code>poster.hide</code> 隐藏播放器海报方法。</li></ul><h2 id="loading-loading" tabindex="-1"><code>loading: Loading</code> <a class="header-anchor" href="#loading-loading" aria-label="Permalink to &quot;`loading: Loading`&quot;">​</a></h2><p>播放器的加载指示器。</p><ul><li><code>loading.el</code> 播放器加载指示器最外层标签元素。</li><li><code>loading.isActive</code> 是否展示播放器加载指示器，只可读。</li><li><code>loading.show</code> 显示播放器加载指示器方法。</li><li><code>loading.hide</code> 隐藏播放器加载指示器方法。</li></ul><h2 id="webfullscreen-webfullscreen" tabindex="-1"><code>webFullscreen: WebFullscreen</code> <a class="header-anchor" href="#webfullscreen-webfullscreen" aria-label="Permalink to &quot;`webFullscreen: WebFullscreen`&quot;">​</a></h2><p>播放器网页全屏。</p><ul><li><code>webFullscreen.isActive</code> 播放器是否处于网页全屏状态，只可读。</li><li><code>webFullscreen.enter</code> 播放器进入网页全屏状态的方法。</li><li><code>webFullscreen.exit</code> 播放器退出网页全屏状态的方法。</li><li><code>webFullscreen.toggle</code> 进入或退出播放器网页全屏状态的方法。</li></ul><h2 id="fullscreen-fullscreen" tabindex="-1"><code>fullscreen: Fullscreen</code> <a class="header-anchor" href="#fullscreen-fullscreen" aria-label="Permalink to &quot;`fullscreen: Fullscreen`&quot;">​</a></h2><p>播放器全屏。</p><ul><li><code>fullscreen.isActive</code> 播放器是否处于全屏状态，只可读。</li><li><code>fullscreen.enter</code> 播放器进入全屏状态的方法。</li><li><code>fullscreen.exit</code> 播放器退出全屏状态的方法。</li><li><code>fullscreen.toggle</code> 进入或退出播放器全屏状态的方法。</li><li><code>fullscreen.enableDblclick</code> 启用双击进入播放器全屏。</li><li><code>fullscreen.disableDblclick</code> 禁用双击进入播放器全屏。</li></ul><h2 id="menu-menu" tabindex="-1"><code>menu: Menu</code> <a class="header-anchor" href="#menu-menu" aria-label="Permalink to &quot;`menu: Menu`&quot;">​</a></h2><p>播放器右键菜单。</p><ul><li><code>menu.el</code> 右键菜单最外层标签元素。</li><li><code>menu.isActive</code> 右键菜单是否打开，只可读。</li><li><code>menu.show</code> 显示右键菜单方法。</li><li><code>menu.hide</code> 隐藏右键菜单方法。</li></ul><h2 id="toast-toast" tabindex="-1"><code>toast: Toast</code> <a class="header-anchor" href="#toast-toast" aria-label="Permalink to &quot;`toast: Toast`&quot;">​</a></h2><p>播放器提示弹框。</p><ul><li><code>toast.show</code> 显示一个提示弹框。</li><li><code>toast.close</code> 关闭一个提示弹框。</li></ul><p>使用方式：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(html: string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HTMLElement, position</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Position, timeout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(toastItem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ToastItem)</span></span></code></pre></div><p>类型签名：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Position</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;center&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;left_top&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;right_top&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;left_bottom&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;right_bottom&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ToastItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  el</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLElement</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  dispose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="shortcut-shortcut" tabindex="-1"><code>shortcut: Shortcut</code> <a class="header-anchor" href="#shortcut-shortcut" aria-label="Permalink to &quot;`shortcut: Shortcut`&quot;">​</a></h2><p>播放器快捷键。</p><ul><li><code>shortcut.register</code> 注册自定义快捷键处理器。</li><li><code>shortcut.unregister</code> 注销自定义快捷键处理器。</li><li><code>shortcut.enable</code> 启用快捷键。</li><li><code>shortcut.disable</code> 禁用快捷键。</li></ul><p>使用方式：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code: number, handler: ShortcutHandler)</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unregister</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code: number)</span></span></code></pre></div><p>类型签名：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ShortcutHandler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">player</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Player</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="controller-controller" tabindex="-1"><code>controller: Controller</code> <a class="header-anchor" href="#controller-controller" aria-label="Permalink to &quot;`controller: Controller`&quot;">​</a></h2><p>播放器控制器。</p><ul><li><code>controller.show</code> 显示播放器控制器。</li><li><code>controller.hide</code> 隐藏播放器控制器。</li></ul><h2 id="settingitems-isettingitem" tabindex="-1"><code>settingItems: ISettingItem[]</code> <a class="header-anchor" href="#settingitems-isettingitem" aria-label="Permalink to &quot;`settingItems: ISettingItem[]`&quot;">​</a></h2><p>播放器的设置菜单项，详情见 <a href="./parameters#parameters-ISettingItem">ISettingItem</a></p><h2 id="currenttime-number" tabindex="-1"><code>currentTime: number</code> <a class="header-anchor" href="#currenttime-number" aria-label="Permalink to &quot;`currentTime: number`&quot;">​</a></h2><p>设置当前播放的时间位置，该属性可以同时被获取和设置新的值。</p><p>比如跳转到第 <code>8</code> 秒：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">player.currentTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span></span></code></pre></div><h2 id="loaded-boolean" tabindex="-1"><code>loaded: boolean</code> <a class="header-anchor" href="#loaded-boolean" aria-label="Permalink to &quot;`loaded: boolean`&quot;">​</a></h2><p>指示视频是否加载成功，只可读。</p><h2 id="duration-number" tabindex="-1"><code>duration: number</code> <a class="header-anchor" href="#duration-number" aria-label="Permalink to &quot;`duration: number`&quot;">​</a></h2><p>获取当前视频总时长，只可读。</p><h2 id="buffered-timeranges" tabindex="-1"><code>buffered: TimeRanges</code> <a class="header-anchor" href="#buffered-timeranges" aria-label="Permalink to &quot;`buffered: TimeRanges`&quot;">​</a></h2><p>视频已加载的范围，只可读，可查看 <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/buffered" target="_blank" rel="noreferrer">MDN buffered</a>。</p><h2 id="paused-boolean" tabindex="-1"><code>paused: boolean</code> <a class="header-anchor" href="#paused-boolean" aria-label="Permalink to &quot;`paused: boolean`&quot;">​</a></h2><p>视频当前是否暂停，只可读。</p><h2 id="ended-boolean" tabindex="-1"><code>ended: boolean</code> <a class="header-anchor" href="#ended-boolean" aria-label="Permalink to &quot;`ended: boolean`&quot;">​</a></h2><p>视频当前是否播放结束，只可读。</p><h2 id="playing-boolean" tabindex="-1"><code>playing: boolean</code> <a class="header-anchor" href="#playing-boolean" aria-label="Permalink to &quot;`playing: boolean`&quot;">​</a></h2><p>视频当前是否正在播放，只可读。</p><h2 id="volume-number" tabindex="-1"><code>volume: number</code> <a class="header-anchor" href="#volume-number" aria-label="Permalink to &quot;`volume: number`&quot;">​</a></h2><p>视频音量大小，该属性可以同时被获取和设置新的值，范围是 <code>0～1</code>。</p><p>比如音量设置音量 <code>90%</code>：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">player.volume </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.9</span></span></code></pre></div><h2 id="muted-boolean" tabindex="-1"><code>muted: boolean</code> <a class="header-anchor" href="#muted-boolean" aria-label="Permalink to &quot;`muted: boolean`&quot;">​</a></h2><p>视频是否静音，该属性可以同时被获取和设置新的值。</p><p>比如将视频设置为静音：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">player.muted </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span></code></pre></div><h2 id="loop-boolean" tabindex="-1"><code>loop: boolean</code> <a class="header-anchor" href="#loop-boolean" aria-label="Permalink to &quot;`loop: boolean`&quot;">​</a></h2><p>视频是否循环播放，该属性可以同时被获取和设置新的值。</p><p>比如将视频设置播放结束后重新播放：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">player.loop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span></code></pre></div><h2 id="playbackrate-number" tabindex="-1"><code>playbackRate: number</code> <a class="header-anchor" href="#playbackrate-number" aria-label="Permalink to &quot;`playbackRate: number`&quot;">​</a></h2><p>视频播放速率，该属性可以同时被获取和设置新的值。</p><p>比如将视频播放速率调为 <code>2</code> 倍播放：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">player.playbackRate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span></code></pre></div>',81)]))}const u=i(l,[["render",n]]);export{k as __pageData,u as default};
